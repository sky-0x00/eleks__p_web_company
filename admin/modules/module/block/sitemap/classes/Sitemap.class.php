<?php

////////////////////////////////////////////////////////////////////////////////
//	 ласс " арта сайта"
////////////////////////////////////////////////////////////////////////////////

class Sitemap extends WorkWithData {

	////////////////////////////////////////////////////////////////////////////////
	//	—войства класса
	////////////////////////////////////////////////////////////////////////////////
	
	var $table_pages;
		
	////////////////////////////////////////////////////////////////////////////////
	//	 онструктор
	////////////////////////////////////////////////////////////////////////////////
	
	function Sitemap () {

		global $cfg;

		$this -> WorkWithData ();
		
		$this -> table_pages 	= $cfg['DB']['Table']['prefix']."pages";
		
		return true;
	}
	
	////////////////////////////////////////////////////////////////////////////////
	//	ѕолучение всех непосредственных дочерних элементов (получение одного уровн€ дерева с pid = id_parent)
	//	$id_parent - id родительской вершины
	////////////////////////////////////////////////////////////////////////////////
	
	function GetChildren ($id_parent) {
		
		return $this -> db -> getResultArray ( sprintf ("SELECT `page_id`, `name`, `url` FROM %s WHERE (`pid` = %s) AND (`active` = 1) AND (`url` <> 'sitemap') AND (`url` <> 'search') ORDER BY `page_id` ASC;", $this->table_pages, $id_parent ));	
	}
	
	////////////////////////////////////////////////////////////////////////////////
	//	¬ывод дерева каталога в массив $array
	//	$pid - id корневой вершины (если 0 - то все дерево)
	//	$level - номер начального уровн€
	////////////////////////////////////////////////////////////////////////////////
	
	function GetTree (&$array, $pid, $level) {
		
		$array = $this -> GetChildren($pid);
		
		for ($i=0; $i<count($array); $i++) {
			
			$children = array();
			$this -> GetTree ($children, $array[$i]['page_id'], $level+1);
			$array[$i]['level'] = $level;
			$array[$i]['children'] = $children;
		}	
		
		return true;
	}
		
}